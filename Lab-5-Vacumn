def vacuum_world():
        
    goal_state = {'A': '0', 'B': '0'}
    cost = 0

    location_input = input("Enter Location of Vacuum") 
    status_input = input("Enter status of " + location_input)
    status_input_complement = input("Enter status of other room")
    print("Initial Location Condition" + str(goal_state))

    if location_input == 'A':
        
        print("Vacuum is placed in Location A")
        if status_input == '1':
            print("Location A is Dirty.")
            goal_state['A'] = '0'
            cost += 1                     
            print("Cost for CLEANING A " + str(cost))
            print("Location A has been Cleaned.")

            if status_input_complement == '1':
              
                print("Location B is Dirty.")
                print("Moving right to the Location B. ")
                cost += 1                       
                print("COST for moving RIGHT" + str(cost))
                goal_state['B'] = '0'
                cost += 1                       
                print("COST for SUCK " + str(cost))
                print("Location B has been Cleaned. ")
            else:
                print("No action" + str(cost))
                
                print("Location B is already clean.")

        if status_input == '0':
            print("Location A is already clean ")
            if status_input_complement == '1':
                print("Location B is Dirty.")
                print("Moving RIGHT to the Location B. ")
                cost += 1                       
                print("COST for moving RIGHT " + str(cost))
                
                goal_state['B'] = '0'
                cost += 1                       
                print("Cost for SUCK" + str(cost))
                print("Location B has been Cleaned. ")
            else:
                print("No action " + str(cost))
                print(cost)
               
                print("Location B is already clean.")

    else:
        print("Vacuum is placed in location B")
        if status_input == '1':
            print("Location B is Dirty.")
            goal_state['B'] = '0'
            cost += 1  
            print("COST for CLEANING " + str(cost))
            print("Location B has been Cleaned.")

            if status_input_complement == '1':
                print("Location A is Dirty.")
                print("Moving LEFT to the Location A. ")
                cost += 1  
                print("COST for moving LEFT" + str(cost))
               
                goal_state['A'] = '0'
                cost += 1  
                print("COST for SUCK " + str(cost))
                print("Location A has been Cleaned.")

        else:
            print(cost)
            
            print("Location B is already clean.")

            if status_input_complement == '1':  
                print("Location A is Dirty.")
                print("Moving LEFT to the Location A. ")
                cost += 1 
                print("COST for moving LEFT " + str(cost))
             
                goal_state['A'] = '0'
                cost += 1 
                print("Cost for SUCK " + str(cost))
                print("Location A has been Cleaned. ")
            else:
                print("No action " + str(cost))
                
                print("Location A is already clean.")

    
    print("GOAL STATE: ")
    print(goal_state)
    print("Performance Measurement: " + str(cost))


vacuum_world()

Rijul R Patil
10:21 AM (0 minutes ago)
to me, Sameecha, Sreenath

def clean(floor,row,col):
    i,j,m,n=row,col,len(floor),len(floor[0])
    goRight=goDown=True
    cleaned = [not any(f) for f in floor]
    while not all(cleaned):
        while any(floor[i]):
            printfloor(floor,i,j)
            if floor[i][j]:
                floor[i][j]=0
                printfloor(floor,i,j)
            if not any(floor[i]):
                cleaned[i]=True
                break
            if j == n-1:
                j-=1
                goRight=False
            elif j==0:
                j+=1
                goRight=True
            else:
                j+=1 if goRight else -1
        if all(cleaned):
            break
        if i == m-1:
            i-=1
            goDown=False
        elif i==0:
            i+=1
            goDown=True
        else:
            i+=1 if goDown else -1
        if cleaned[i]:
            printfloor(floor,i,j)

def printfloor(floor,row,col):
    for r in range(len(floor)):
        for c in range(len(floor[r])):
            if r==row and c==col:
                print(f" *{floor[r][c]}* ", end = '')
            else:
                print(f"  {floor[r][c]}  ", end = '')
        print(end="\n")
    print(end="\n")

floor = [[1, 0, 0],
         [0, 1, 0],
         [1, 0, 1]]

clean(floor, 0, 0)
